<?php

namespace ContainerXiLrMqS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getVisitorLoggerService extends Contao_ManagerBundle_HttpKernel_ContaoKernelProdContainer
{
    /*
     * Gets the public 'BugBuster\VisitorsBundle\Classes\VisitorLogger' shared autowired service.
     *
     * @return \BugBuster\VisitorsBundle\Classes\VisitorLogger
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/bugbuster/contao-visitors-bundle/src/Classes/VisitorLogger.php';

        $a = new \Monolog\Logger('visitors');
        $a->pushProcessor(($container->privates['contao.monolog.processor'] ?? self::getContao_Monolog_ProcessorService($container)));
        $a->pushProcessor(($container->privates['contao_manager.monolog.request_processor'] ??= new \Contao\ManagerBundle\Monolog\RequestProcessor()));
        $a->pushHandler(($container->privates['monolog.handler.console'] ?? self::getMonolog_Handler_ConsoleService($container)));
        $a->pushHandler(($container->privates['monolog.handler.main'] ?? self::getMonolog_Handler_MainService($container)));
        $a->pushHandler(($container->privates['contao.monolog.handler'] ?? self::getContao_Monolog_HandlerService($container)));
        $a->pushHandler(($container->privates['monolog.handler.visitors'] ?? $container->load('getMonolog_Handler_VisitorsService')));

        return $container->services['BugBuster\\VisitorsBundle\\Classes\\VisitorLogger'] = new \BugBuster\VisitorsBundle\Classes\VisitorLogger($container, $a, ($container->services['monolog.logger.contao'] ?? $container->load('getMonolog_Logger_ContaoService')));
    }
}
