<?php

namespace ContainerXiLrMqS;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getContainerUtilService extends Contao_ManagerBundle_HttpKernel_ContaoKernelProdContainer
{
    /*
     * Gets the private 'HeimrichHannot\UtilsBundle\Util\ContainerUtil' shared autowired service.
     *
     * @return \HeimrichHannot\UtilsBundle\Util\ContainerUtil
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/heimrichhannot/contao-utils-bundle/src/Util/ContainerUtil.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/filesystem/Filesystem.php';

        return $container->privates['HeimrichHannot\\UtilsBundle\\Util\\ContainerUtil'] = new \HeimrichHannot\UtilsBundle\Util\ContainerUtil((new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'Contao\\CoreBundle\\Security\\Authentication\\Token\\TokenChecker' => ['services', 'contao.security.token_checker', 'getContao_Security_TokenCheckerService', false],
            'Symfony\\Component\\HttpKernel\\Config\\FileLocator' => ['privates', 'file_locator', 'getFileLocatorService', true],
            'monolog.logger.contao' => ['services', 'monolog.logger.contao', 'getMonolog_Logger_ContaoService', true],
        ], [
            'Contao\\CoreBundle\\Security\\Authentication\\Token\\TokenChecker' => '?',
            'Symfony\\Component\\HttpKernel\\Config\\FileLocator' => '?',
            'monolog.logger.contao' => 'Psr\\Log\\LoggerInterface',
        ]))->withContext('HeimrichHannot\\UtilsBundle\\Util\\ContainerUtil', $container), ($container->services['kernel'] ?? $container->get('kernel', 1)), ($container->services['contao.framework'] ?? self::getContao_FrameworkService($container)), ($container->services['contao.routing.scope_matcher'] ?? self::getContao_Routing_ScopeMatcherService($container)), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ($container->privates['filesystem'] ??= new \Symfony\Component\Filesystem\Filesystem()));
    }
}
